#pragma version 6

// global state
// start = last withdraw ~ def create time
// orin # coins
// end
// asa id

// withdraw sets new start
// update has to at least not worsen ben rate

////////////////
// Handle each possible OnCompletion type. We don't have to worry about
// handling ClearState, because the ClearStateProgram will execute in that
// case, not the ApprovalProgram.

gtxn 0 OnCompletion
int NoOp
==
bnz handle_noop

gtxn 0 OnCompletion
int OptIn
==
bnz handle_optin

gtxn 0 OnCompletion
int CloseOut
==
bnz handle_closeout

gtxn 0 OnCompletion
int UpdateApplication
==
bnz handle_updateapp

gtxn 0 OnCompletion
int DeleteApplication
==
bnz handle_deleteapp

// Unexpected OnCompletion value. Should be unreachable.
b decline
////////////////


////////////////
handle_noop:

gtxna 0 ApplicationArgs 0
byte "init"
==
bnz handle_init

gtxna 0 ApplicationArgs 0
byte "withdraw"
==
bnz handle_withdraw

gtxna 0 ApplicationArgs 0
byte "update"
==
bnz handle_update

gtxna 0 ApplicationArgs 0
byte "cancel"
==
bnz handle_cancel

// Unexpected first arg
b decline
////////////////

////////////////
handle_init:
// args: init, cancancel, end, beneficiary

// opt-into ASA
itxn_begin
int axfer
itxn_field TypeEnum
global CurrentApplicationAddress
itxn_field AssetReceiver
gtxna 0 Assets 0
itxn_field XferAsset
int 0
itxn_field AssetAmount
itxn_submit

// only if not run before
int 0
byte "CANCANCEL"
app_global_get_ex
bnz decline
pop

// only creator can run
gtxn 0 Sender
global CreatorAddress
==
assert

// 1st of 2 txns
global GroupSize
int 2
==
assert

// 2nd txn is asset send to this app for ASA in --foreign-asset
gtxn 1 TypeEnum
int axfer
==
gtxn 1 XferAsset
gtxna 0 Assets 0
==
&&
assert

// DEBUG - bug after
// gtxna 0 ApplicationArgs 2
// log
// global LatestTimestamp
// itob
// log
// b approve

// end is after now
gtxna 0 ApplicationArgs 2
btoi
global LatestTimestamp
>
bz decline

// DEBUG
// b approve

// set global state
byte "CANCANCEL"
gtxna 0 ApplicationArgs 1
btoi
app_global_put

byte "START"
global LatestTimestamp
app_global_put

byte "END"
gtxna 0 ApplicationArgs 2
btoi
app_global_put

byte "BENEFICIARY"
gtxna 0 Accounts 1
app_global_put

b approve

////////////////

////////////////
handle_withdraw:

// single txn
global GroupSize
int 1
==
assert

// global to scratch
byte "BENEFICIARY"
app_global_get
store 0

byte "START"
app_global_get
store 10

byte "END"
app_global_get
store 11

// only BENEFICIARY can run
txn Sender
load 0
==
assert

// calc withdrawal amount
// works up to which timestamp? (depends on accuracy [100000])
callsub calc_withdrawal_amount
store 1

// only cont if something to send
load 1
bz decline

// send ASA
itxn_begin
int axfer
itxn_field TypeEnum
load 0
itxn_field AssetReceiver
txna Assets 0
itxn_field XferAsset
load 1
itxn_field AssetAmount
itxn_submit

// reset start in global state
byte "START"
global LatestTimestamp
app_global_put

b approve
////////////////

////////////////
calc_withdrawal_amount:

// if LatestTimestamp <= END, amount is everything
global LatestTimestamp
load 11
<=
bnz calc_withdrawal_amount_all

// calculate pro-rata
global LatestTimestamp
load 10
-
int 100000
*
load 11
load 10
-
/
global CurrentApplicationAddress
txna Assets 0
asset_holding_get AssetBalance
bz decline
*
int 100000
/
retsub

calc_withdrawal_amount_all:
global CurrentApplicationAddress
txna Assets 0
asset_holding_get AssetBalance
bz decline
retsub
////////////////


////////////////
handle_update:
// args: END

// only creator can run
global CreatorAddress
txn Sender
==
assert

// init should have run already
int 0
byte "CANCANCEL"
app_global_get_ex
assert
pop

// 1st of 2 txns
global GroupSize
int 2
==
txn GroupIndex
int 0
==
&&
assert

// 2nd txn is asset send to this app for ASA in --foreign-asset
gtxn 1 TypeEnum
int axfer
==
gtxn 1 XferAsset
txna Assets 0
==
&&
assert

// withdrawal rate cannot worsen
// old rate = (old_END - START) / old_amount
// new rate = (new_END - START) / (old_amount + extra_amount)
// algebra: old_amount*new_END - old_amount*old_END - extra_amount*old_END + extra_amount*START >= 0

// old_amount
global CurrentApplicationAddress
txna Assets 0
asset_holding_get AssetBalance
bz decline
store 1

// new_END
txna ApplicationArgs 1
btoi
store 2

// old_END
byte "END"
app_global_get
store 3

// extra_amount
gtxn 1 AssetAmount
store 4

// START
byte "START"
app_global_get
store 5

// check equation
load 1
load 2
*
load 1
load 3
*
-
load 4
load 3
*
-
load 4
load 5
+
int 0
>=
assert

// new end is after now
txna ApplicationArgs 1
btoi
global LatestTimestamp
>
bz decline

// update end in global state
byte "END"
txna ApplicationArgs 1
btoi
app_global_put

b approve
////////////////

////////////////
handle_cancel:

// only CREATOR can run
global GroupSize
int 1
==
global CreatorAddress
txn Sender
==
&&
assert

// CANCANCEL needs to be true
byte "CANCANCEL"
app_global_get
bz decline

// send all ASA to CREATOR
itxn_begin
int axfer
itxn_field TypeEnum
global CreatorAddress
itxn_field AssetReceiver
txna Assets 0
itxn_field XferAsset

// all coins
global CurrentApplicationAddress
txna Assets 0
asset_holding_get AssetBalance
bz decline
itxn_field AssetAmount

itxn_submit

b approve
////////////////

///////////////
// Update only by creator - for now
// TODO maybe make updating impossible for safety and assurance
handle_updateapp:

global GroupSize
int 1
==
global CreatorAddress
txn Sender
==
&&
assert

b approve
///////////////


///////////////
// handle closeOut, cannot delete app, no decline
handle_closeout:
handle_deleteapp:
b decline
///////////////

///////////////
// handle opt-in
handle_optin:
b approve
///////////////

////////////////
// end branches
decline:
int 0
return

approve:
int 1
return
////////////////


////////////////
// fyi
// Txn.Accounts[0] is sender of txn
// Txn.Apps[0] is own app
////////////////